(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{433:function(t,e,n){"use strict";n.r(e);var a=n(1),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("本文主要介绍TS相关内容")]),t._v(" "),e("h2",{attrs:{id:"typescript-https-ts-xcatliu-com-advanced-generics-html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-https-ts-xcatliu-com-advanced-generics-html"}},[t._v("#")]),t._v(" TypeScript(https://ts.xcatliu.com/advanced/generics.html)")]),t._v(" "),e("h3",{attrs:{id:"泛型-t"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型-t"}},[t._v("#")]),t._v(" 泛型(T)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray<string>(3, 'x'); // ['x', 'x', 'x']\n上例中，我们在函数名后添加了<T>，其中T用来指代任意输入的类型，在后面的输入value:T 和Array<T> 中即可使用了。\n")])])]),e("h3",{attrs:{id:"多个类型参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个类型参数"}},[t._v("#")]),t._v(" 多个类型参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function swap<T, U>(tuple: [T, U]): [U, T] {\n    return [tuple[1], tuple[0]];\n}\n\nswap([7, 'seven']); // ['seven', 7]\n上例中，我们定义了一个 swap 函数，用来交换输入的元组。\n")])])]),e("h3",{attrs:{id:"泛型约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束"}},[t._v("#")]),t._v(" 泛型约束")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意操作他的属性或者方法\nfunction loggingIdentity<T>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n\n// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'T'.\n\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n上例中，我们采用Lengthwise 约束了泛型的T 必须符合Lengthwise形状，也就是必须包含length属性\n")])])]),e("p",[t._v("never: 表示永远不存在的值的类型 throw error()\nvoid: 类型表示没有任何类型 1) 没有返回值的函数，其返回值类型为 void 2)申明void类型的变量，只能赋值null undefined\nany: 允许赋值为任意类型")])])}),[],!1,null,null,null);e.default=r.exports}}]);